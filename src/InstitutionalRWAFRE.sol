import "@thrackle-io/forte-rules-engine/src/client/RulesEngineClient.sol";

// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.24;

/**
 * @title Institutional RWA Forte Rules Engine Integration - Forte Compatible
 * @author ChainAim
 * @dev This file defines the Rules Engine integration for institutional RWA compliance
 * @dev Modifiers will be auto-generated by the Forte SDK based on the policy file
 * @dev Uses uint256 parameters for Forte Rules Engine compatibility
 */
abstract contract InstitutionalRWAFRE is RulesEngineClient {
    
    /**
     * @dev Modifier for comprehensive institutional asset minting (ALL 14 RULES)
     * @param recipient Address receiving the asset
     * @param amount Number of fractions being minted
     * @param principalAmount USD value of the underlying asset
     * @param assetTypeId Asset type as uint256 constant
     * @param leiHash Keccak256 hash of LEI code
     * @param corporateNameHash Keccak256 hash of corporate name
     */
    modifier checkRulesBeforemintInstitutionalAsset(
        address recipient, 
        uint256 amount, 
        uint256 principalAmount, 
        uint256 assetTypeId, 
        uint256 leiHash, 
        uint256 corporateNameHash
    ) {
        bytes memory encoded = abi.encodeWithSelector(
            msg.sig,
            recipient,
            amount,
            principalAmount,
            assetTypeId,
            leiHash,
            corporateNameHash
        );
        _invokeRulesEngine(encoded);
        _;
    }
    
    /**
     * @dev Modifier for PYUSD cross-border asset minting (RULES 13-14)
     * @param recipient Address receiving the PYUSD-denominated asset
     * @param amount Number of fractions being minted
     * @param pyusdAmount PYUSD amount for the transaction
     * @param fromCountryCode ISO 3166-1 numeric country code for buyer
     * @param toCountryCode ISO 3166-1 numeric country code for seller
     */
    modifier checkRulesBeforemintInstitutionalAssetPYUSD(
        address recipient,
        uint256 amount,
        uint256 pyusdAmount,
        uint256 fromCountryCode,
        uint256 toCountryCode
    ) {
        bytes memory encoded = abi.encodeWithSelector(
            msg.sig,
            recipient,
            amount,
            pyusdAmount,
            fromCountryCode,
            toCountryCode
        );
        _invokeRulesEngine(encoded);
        _;
    }
    
    /**
     * @dev Modifier for transfer compliance (existing rwa-demo rules)
     * @param to Address receiving the transfer
     * @param tokenId Token being transferred
     */
    modifier checkRulesBefore_update(address to, uint256 tokenId) {
        bytes memory encoded = abi.encodeWithSelector(msg.sig, to, tokenId);
        _invokeRulesEngine(encoded);
        _;
    }
    
    /**
     * @dev Post-transfer modifier (if needed for additional compliance)
     * @param to Address that received the transfer
     * @param tokenId Token that was transferred
     */
    modifier checkRulesAfter_update(address to, uint256 tokenId) {
        bytes memory encoded = abi.encodeWithSelector(msg.sig, to, tokenId);
        _;
        _invokeRulesEngine(encoded);
    }
}