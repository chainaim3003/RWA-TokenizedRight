{
  "Policy": "Institutional RWA Complete Compliance Policy",
  "PolicyType": "open",
  "ForeignCalls": [
    {
      "name": "getKycLevel",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getKycLevel(address)",
      "returnType": "uint256",
      "valuesToPass": "0"
    },
    {
      "name": "isOFACSanctioned",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "isOFACSanctioned(address)",
      "returnType": "bool",
      "valuesToPass": "0"
    },
    {
      "name": "isCrossBorderSanctioned",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS", 
      "function": "isCrossBorderSanctioned(address,address)",
      "returnType": "bool",
      "valuesToPass": "0,0"
    },
    {
      "name": "verifyGLEIF",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "verifyGLEIF(uint256,uint256)",
      "returnType": "bool",
      "valuesToPass": "4,5"
    },
    {
      "name": "verifyBPMNCompliance",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "verifyBPMNCompliance(uint256)",
      "returnType": "uint256",
      "valuesToPass": "4"
    },
    {
      "name": "getACTUSRiskScore",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getACTUSRiskScore(uint256,uint256)",
      "returnType": "uint256",
      "valuesToPass": "2,3"
    },
    {
      "name": "verifyDCSADocuments",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "verifyDCSADocuments(uint256)",
      "returnType": "bool",
      "valuesToPass": "4"
    },
    {
      "name": "calculateOptimalFractions",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "calculateOptimalFractions(uint256,uint256)",
      "returnType": "uint256",
      "valuesToPass": "2,3"
    },
    {
      "name": "getMetadataScore",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getMetadataScore(uint256,uint256,uint256)",
      "returnType": "uint256",
      "valuesToPass": "1,4,5"
    },
    {
      "name": "getMinimumFractionThreshold",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getMinimumFractionThreshold(uint256)",
      "returnType": "uint256", 
      "valuesToPass": "3"
    },
    {
      "name": "getLiquidityScore",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getLiquidityScore(uint256,uint256)",
      "returnType": "uint256",
      "valuesToPass": "2,3"
    },
    {
      "name": "getAssetTypeThreshold",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getAssetTypeThreshold(uint256,uint256)",
      "returnType": "uint256",
      "valuesToPass": "3,2"
    },
    {
      "name": "checkPYUSDPegStability",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "checkPYUSDPegStability(uint256)",
      "returnType": "bool",
      "valuesToPass": "1000000"
    },
    {
      "name": "validateCrossBorderPYUSD",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "validateCrossBorderPYUSD(uint256,uint256,uint256)",
      "returnType": "bool",
      "valuesToPass": "3,4,2"
    },
    {
      "name": "getKycLevelTransfer",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "getKycLevel(address)",
      "returnType": "uint256",
      "valuesToPass": "0"
    },
    {
      "name": "isOFACSanctionedTransfer",
      "address": "PLACEHOLDER_MODIFIED_PRET_ADDRESS",
      "function": "isOFACSanctioned(address)",
      "returnType": "bool",
      "valuesToPass": "0"
    }
  ],
  "Trackers": [],
  "Rules": [
    {
      "condition": "FC:getKycLevel > 2",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Insufficient KYC Level for Institutional RWA\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:isOFACSanctioned == false",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Address is on OFAC Sanctions List\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:isCrossBorderSanctioned == false",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Cross-border transaction restricted\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:verifyGLEIF == true",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"GLEIF entity verification failed\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:verifyBPMNCompliance >= 75",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"BPMN process compliance score too low\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:getACTUSRiskScore <= 50",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"ACTUS risk score too high\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:verifyDCSADocuments == true",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"DCSA document verification failed\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:calculateOptimalFractions > 1000",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Optimal fractions calculation failed\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:getMetadataScore >= 80",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Metadata quality score too low\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:getMinimumFractionThreshold > 0",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Minimum fraction threshold not met\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:getLiquidityScore >= 70",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Liquidity score too low\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:getAssetTypeThreshold > 1000",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Asset type threshold not met\")"],
      "callingFunction": "mintInstitutionalAsset(address,uint256,uint256,uint256,uint256,uint256,string,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 principalAmount, uint256 assetTypeId, uint256 leiHash, uint256 corporateNameHash"
    },
    {
      "condition": "FC:checkPYUSDPegStability == true",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"PYUSD peg is unstable\")"],
      "callingFunction": "mintInstitutionalAssetPYUSD(address,uint256,uint256,uint256,uint256,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 pyusdAmount, uint256 fromCountryCode, uint256 toCountryCode"
    },
    {
      "condition": "FC:validateCrossBorderPYUSD == true",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Cross-border PYUSD transaction not allowed\")"],
      "callingFunction": "mintInstitutionalAssetPYUSD(address,uint256,uint256,uint256,uint256,string,string)",
      "encodedValues": "address recipient, uint256 amount, uint256 pyusdAmount, uint256 fromCountryCode, uint256 toCountryCode"
    },
    {
      "condition": "FC:getKycLevelTransfer > 2",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Insufficient KYC Level for Transfer\")"],
      "callingFunction": "_update(address,uint256,address)",
      "encodedValues": "address to, uint256 tokenId"
    },
    {
      "condition": "FC:isOFACSanctionedTransfer == false",
      "positiveEffects": [],
      "negativeEffects": ["revert(\"Transfer to OFAC sanctioned address\")"],
      "callingFunction": "_update(address,uint256,address)",
      "encodedValues": "address to, uint256 tokenId"
    }
  ]
}